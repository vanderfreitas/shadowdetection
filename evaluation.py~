import cv2
import numpy as np
from matplotlib import pyplot as plt

from os import listdir
from os.path import isfile, join

# Imagens originais
oriDirectory = 'ori/'
oriImages = [f for f in listdir(oriDirectory) if isfile(join(oriDirectory, f))]

# Sombras detectadas
detecDirectory = 'detected/'
detecImages = [f for f in listdir(detecDirectory) if isfile(join(detecDirectory, f))]

# Ground truth
gtDirectory = 'gt/'
gtImages = [f for f in listdir(gtDirectory) if isfile(join(gtDirectory, f))]

# Ordenando as listas para ter correspondencia de indice
oriImages.sort()
detecImages.sort()
gtImages.sort()

print "### Diretorios ###"
print oriImages
print detecImages
print gtImages

# Metricas
precision_lista = []
recall_lista = []
f_measure_lista = []


for i in xrange(len(oriImages)):

	imgNome = oriImages[i]
	detectedNome = detecImages[i]
	gtNome = gtImages[i]

	# Carregando as imagens
	imgRef = cv2.imread(oriDirectory + imgNome)
	detected = cv2.imread(detecDirectory + detectedNome)
	gt = cv2.imread(gtDirectory + gtNome)

	# invertendo a imagem para as sombras ficarem em preto e o fundo em branco, como no nosso exemplo
	#gt = 255 - gt



	nroPixelsSombra = 0
	nroPixelsNaoSombra = 0
	TP = 0
	FN = 0
	FP = 0


	# Calcula TP, FN e FP  (TIAN et al 2016)
	for l in xrange(imgRef.shape[0]):
		for c in xrange(imgRef.shape[1]):

			if gt.item(l,c,0) == 255:
				nroPixelsSombra += 1.0
				if detected.item(l,c,0) == 255:
					TP += 1.0 #true shadows correctly identified
				else:
					FN += 1.0 #true shadows not detected
			
			else:
				nroPixelsNaoSombra += 1.0;
				if detected.item(l,c,0) == 255:
					FP += 1.0


	TP_FN = (TP + FN)
	TP_FP = (TP + FP)
	
	if TP_FN == 0.0:
		precision = 0.0
	else:
		precision = TP / TP_FN

	if TP_FP == 0.0:
		recall = 0.0
	else:
		recall = TP / TP_FP

	if precision==0.0 and recall==0.0:
		f_measure = 0.0 
		print imgNome, ":  0.0"
	else:
		f_measure = 2.0 * ( (precision * recall) / (precision + recall) )

	precision_lista.append(precision)
	recall_lista.append(recall)
	f_measure_lista.append(f_measure)


print "\n\n##### Listas #####"
print precision_lista
print recall_lista
print f_measure_lista


print "\n\n###### MEDIAS ######"

print "P/R/F = ", np.mean(precision_lista), "/", np.mean(recall_lista), "/", np.mean(f_measure_lista)


            

        
